{
  "openapi": "3.1.0",
  "info": {
    "title": "BadBeatMods API",
    "description": "This isn't really fully complete, but its better than absolutely nothing.\n\nThis API documentation is automatically generated and therefor may not be 100% accurate and may be missing a few fields. For example, request bodies are not fully fleshed out, and may not be accurate. Full documentation is still currently a work in progress.",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://bbm.saera.gay/api"
    }
  ],
  "tags": [
    {
      "name": "Status",
      "description": "Status related endpoints"
    },
    {
      "name": "Mods",
      "description": "Mod related endpoints"
    },
    {
      "name": "Versions",
      "description": "Version Management"
    },
    {
      "name": "MOTD",
      "description": "Message of the Day related endpoints"
    },
    {
      "name": "Approval",
      "description": "Approval related endpoints"
    },
    {
      "name": "Users",
      "description": "User related endpoints"
    },
    {
      "name": "Admin",
      "description": "Admin related endpoints"
    },
    {
      "name": "Bulk Actions",
      "description": "Actions that allow you to skip calling the same endpoint over and over again"
    },
    {
      "name": "Auth",
      "description": "Authentication related endpoints"
    },
    {
      "name": "BeatMods",
      "description": "Legacy BeatMods API endpoints"
    }
  ],
  "paths": {
    "/beatmods/mod": {
      "get": {
        "tags": [
          "BeatMods"
        ],
        "summary": "Legacy BeatMods API endpoint.",
        "description": "Legacy BeatMods API endpoint. This is available for mod downloaders that have not been updated to use the new API.<br><br>This endpoint does not work the same way as the old BeatMods API, but it should be close enough to work with most mod downloaders.",
        "parameters": [
          {
            "name": "gameVersion",
            "description": "The game version as a string (ex. '1.29.1', '1.40.0').",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The statuses to return. Available statuses are: 'approved' & 'all'",
            "format": "string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all mods."
          },
          "400": {
            "description": "Missing Game Version."
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/mod": {
      "get": {
        "tags": [
          "BeatMods"
        ],
        "summary": "Legacy BeatMods API endpoint.",
        "description": "Legacy BeatMods API endpoint. This is available for mod downloaders that have not been updated to use the new API.<br><br>This endpoint does not work the same way as the old BeatMods API, but it should be close enough to work with most mod downloaders.",
        "parameters": [
          {
            "name": "gameVersion",
            "description": "The game version as a string (ex. '1.29.1', '1.40.0').",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The statuses to return. Available statuses are: 'approved' & 'all'",
            "format": "string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all mods."
          },
          "400": {
            "description": "Missing Game Version."
          }
        },
        "deprecated": true
      }
    },
    "/beatmods/versions": {
      "get": {
        "tags": [
          "BeatMods"
        ],
        "summary": "Legacy BeatMods API Version endpoint.",
        "description": "Legacy BeatMods API endpoint. This is available for mod downloaders that have not been updated to use the new API.<br><br>This endpoint does not work the same way as the old BeatMods API, but it should be close enough to work with most mod downloaders.",
        "responses": {
          "200": {
            "description": "Returns all versions."
          }
        },
        "deprecated": true
      }
    },
    "/versions.json": {
      "get": {
        "tags": [
          "BeatMods"
        ],
        "summary": "Legacy BeatMods API Version endpoint.",
        "description": "Legacy BeatMods API endpoint. This is available for mod downloaders that have not been updated to use the new API.<br><br>This endpoint does not work the same way as the old BeatMods API, but it should be close enough to work with most mod downloaders.",
        "responses": {
          "200": {
            "description": "Returns all versions."
          }
        },
        "deprecated": true
      }
    },
    "/beatmods/aliases": {
      "get": {
        "tags": [
          "BeatMods"
        ],
        "summary": "Legacy BeatMods API Aliases endpoint.",
        "description": "Legacy BeatMods API endpoint. This is available for mod downloaders that have not been updated to use the new API.<br><br>This endpoint does not work the same way as the old BeatMods API, but it should be close enough to work with most mod downloaders.",
        "responses": {
          "200": {
            "description": "Returns all aliases."
          }
        },
        "deprecated": true
      }
    },
    "/aliases.json": {
      "get": {
        "tags": [
          "BeatMods"
        ],
        "summary": "Legacy BeatMods API Aliases endpoint.",
        "description": "Legacy BeatMods API endpoint. This is available for mod downloaders that have not been updated to use the new API.<br><br>This endpoint does not work the same way as the old BeatMods API, but it should be close enough to work with most mod downloaders.",
        "responses": {
          "200": {
            "description": "Returns all aliases."
          }
        },
        "deprecated": true
      }
    },
    "/mods": {
      "get": {
        "tags": [
          "Mods"
        ],
        "summary": "Get all mods for a specified version.",
        "description": "Get all mods.<br><br>If gameName is not provided, it will default to Beat Saber.<br>If gameVersion is not provided, it will default to whatever is set as the lastest version for the selected game.",
        "parameters": [
          {
            "name": "gameName",
            "description": "The game name.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gameVersion",
            "description": "The game version (ex. '1.29.1', '1.40.0').",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "description": "The status of the mod. Available status are: 'verified'. Typing anything other than that will show you unverified mods too.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platform",
            "description": "The platform of the mod. Available platforms are: 'oculuspc', 'universalpc', 'steampc'",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all mods.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mods": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "mod": {
                            "$ref": "#/components/schemas/ModAPIPublicResponse"
                          },
                          "latest": {
                            "$ref": "#/components/schemas/ModVersionAPIPublicResponse"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mods": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "mod": {
                            "$ref": "#/components/schemas/ModAPIPublicResponse"
                          },
                          "latest": {
                            "$ref": "#/components/schemas/ModVersionAPIPublicResponse"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid gameVersion."
          }
        }
      }
    },
    "/mods/{modIdParam}": {
      "get": {
        "tags": [
          "Mods"
        ],
        "summary": "Get a specific mod by ID.",
        "description": "Get a specific mod by ID. This will also return every version of the mod.",
        "parameters": [
          {
            "name": "modIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The mod ID."
          },
          {
            "name": "raw",
            "description": "Return the raw mod info.",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the mod."
          },
          "400": {
            "description": "Invalid mod id."
          },
          "404": {
            "description": "Mod not found."
          }
        }
      },
      "patch": {
        "tags": [
          "Mods"
        ],
        "description": "Update a mod.",
        "parameters": [
          {
            "name": "modIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Mod ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "description": "Mod data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditMod"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EditMod"
              }
            }
          }
        }
      }
    },
    "/modversions/{modVersionIdParam}": {
      "get": {
        "tags": [
          "Mods"
        ],
        "summary": "Get a specific mod version by ID.",
        "description": "Get a specific mod version by ID.",
        "parameters": [
          {
            "name": "modVersionIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The mod version ID."
          },
          {
            "name": "raw",
            "description": "Return the raw mod depedendcies without attempting to resolve them.",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the mod version."
          },
          "400": {
            "description": "Invalid mod version id."
          },
          "404": {
            "description": "Mod version not found."
          }
        }
      }
    },
    "/hashlookup": {
      "get": {
        "tags": [
          "Mods"
        ],
        "summary": "Get a specific mod version that has a file with the specified hash.",
        "description": "Get a specific mod version that has a file with the specified hash. This is useful for finding the mod that a file belongs to.",
        "parameters": [
          {
            "name": "hash",
            "description": "The hash to look up.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "raw",
            "description": "Return the raw mod depedendcies without attempting to resolve them.",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the mod version."
          },
          "400": {
            "description": "Missing hash."
          },
          "404": {
            "description": "Hash not found."
          }
        }
      }
    },
    "/multihashlookup": {
      "get": {
        "tags": [
          "Mods"
        ],
        "summary": "Get a specific mod version that has a file with the specified hash.",
        "description": "Look up multiple hashes at once, and sort the results by hash. Developed for PinkModManager.",
        "parameters": [
          {
            "name": "hash",
            "description": "The hash to look up.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the mod version."
          },
          "400": {
            "description": "Missing hash."
          },
          "404": {
            "description": "Hash not found."
          }
        }
      }
    },
    "/mods/create": {
      "post": {
        "tags": [
          "Mods"
        ],
        "summary": "Create a mod.",
        "description": "Create a mod.",
        "parameters": [
          {
            "name": "icon",
            "in": "formData",
            "description": "Mod icon.",
            "required": false,
            "schema": {
              "type": "file"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "413": {
            "description": "Payload Too Large"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMod"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateMod"
              }
            }
          }
        }
      }
    },
    "/mods/{modIdParam}/upload": {
      "post": {
        "tags": [
          "Mods"
        ],
        "summary": "Upload a mod version.",
        "description": "Upload a mod version.",
        "parameters": [
          {
            "name": "modIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Mod ID."
          },
          {
            "name": "file",
            "in": "formData",
            "description": "Mod zip file.",
            "required": true,
            "schema": {
              "type": "file"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "413": {
            "description": "Payload Too Large"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEditModVersion"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateEditModVersion"
              }
            }
          }
        }
      }
    },
    "/mods/{modIdParam}/icon": {
      "post": {
        "tags": [
          "Mods"
        ],
        "summary": "Update a mod icon.",
        "description": "Update a mod icon.",
        "parameters": [
          {
            "name": "modIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Mod ID."
          },
          {
            "name": "icon",
            "in": "formData",
            "description": "Mod icon.",
            "required": false,
            "schema": {
              "type": "file"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "413": {
            "description": "Payload Too Large"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/modversion/{modVersionIdParam}": {
      "patch": {
        "tags": [
          "Mods"
        ],
        "description": "Update a mod version.",
        "parameters": [
          {
            "name": "modVersionIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Mod Version ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "description": "Mod version data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEditModVersion"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateEditModVersion"
              }
            }
          }
        }
      }
    },
    "/mods/{modIdParam}/submit": {
      "post": {
        "tags": [
          "Mods"
        ],
        "description": "",
        "parameters": [
          {
            "name": "modIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/modVersions/{modVersionIdParam}/submit": {
      "post": {
        "tags": [
          "Mods"
        ],
        "description": "",
        "parameters": [
          {
            "name": "modVersionIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get logged in user information.",
        "description": "Get user information.",
        "responses": {
          "200": {
            "description": "Returns user information."
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/auth/github": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "",
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/auth/github/callback": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/auth/discord": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "",
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/auth/discord/callback": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout.",
        "description": "Logout.",
        "responses": {
          "200": {
            "description": "Logout successful."
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/games": {
      "get": {
        "tags": [
          "Versions"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/versions": {
      "get": {
        "tags": [
          "Versions"
        ],
        "description": "",
        "parameters": [
          {
            "name": "gameName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Versions"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "description": "The gameName and version to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gameName": {
                    "type": "string",
                    "description": "The game name"
                  },
                  "version": {
                    "type": "string",
                    "description": "The version to create"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "gameName": {
                    "type": "string",
                    "description": "The game name"
                  },
                  "version": {
                    "type": "string",
                    "description": "The version to create"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/versions/default": {
      "get": {
        "tags": [
          "Versions"
        ],
        "description": "",
        "parameters": [
          {
            "name": "gameName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "tags": [
          "Versions"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "requestBody": {
          "description": "The ID of the version to set as default",
          "required": true,
          "type": "object",
          "content": {
            "application/json": {
              "schema": {
                "gameVersionId": 1
              }
            },
            "application/xml": {
              "schema": {
                "gameVersionId": 1
              }
            }
          }
        }
      }
    },
    "/beatmods/importAll": {
      "post": {
        "tags": [
          "Admin"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/admin/health/hashCheck": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/admin/health/missingIcons": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/admin/health/dependencyResolution": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "",
        "parameters": [
          {
            "name": "versionId",
            "description": "The version ID to check.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gameName",
            "description": "The game name to check.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeUnverified",
            "description": "Include unverified mods.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/admin/linkversions": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Mark all versions as compatible with another gameversion.",
        "description": "Link two versions together.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "requestBody": {
          "description": "The versions to link.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "version1": 1,
                "version2": 2
              }
            },
            "application/xml": {
              "schema": {
                "version1": 1,
                "version2": 2
              }
            }
          }
        }
      }
    },
    "/admin/users/addRole": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Add a role to a user.",
        "description": "Add a role to a user.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "requestBody": {
          "description": "The role to add.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "userId": 1,
                "role": "string",
                "gameName": "string"
              }
            },
            "application/xml": {
              "schema": {
                "userId": 1,
                "role": "string",
                "gameName": "string"
              }
            }
          }
        }
      }
    },
    "/admin/users/removeRole": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Remove a role from a user.",
        "description": "Remove a role from a user.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "requestBody": {
          "description": "The role to remove.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "userId": 1,
                "role": "string",
                "gameName": "string"
              }
            },
            "application/xml": {
              "schema": {
                "userId": 1,
                "role": "string",
                "gameName": "string"
              }
            }
          }
        }
      }
    },
    "/approval/{queueType}": {
      "get": {
        "tags": [
          "Approval"
        ],
        "summary": "Get new mods & modVersions pending approval.",
        "description": "Get a list of mods & modVersions pending their first approval.",
        "parameters": [
          {
            "name": "queueType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "mods",
                "modVersions",
                "edits"
              ]
            },
            "description": "The type of queue to get."
          },
          {
            "name": "gameName",
            "description": "The name of the game to get new mods for.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of mods pending first approval. The response will contain the mods, modVersions, and edits that are pending approval. Note that mods, modVersions, and edits will only be returned depending on the queueType specified. The edit objects `original` property will contain the original mod or modVersion object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mods": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ModAPIPublicResponse"
                      }
                    },
                    "modVersions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "mod": {
                            "$ref": "#/components/schemas/ModAPIPublicResponse"
                          },
                          "modVersion": {
                            "$ref": "#/components/schemas/ModVersionDBObject"
                          }
                        }
                      }
                    },
                    "edits": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "mod": {
                            "$ref": "#/components/schemas/ModAPIPublicResponse"
                          },
                          "original": {
                            "$ref": "#/components/schemas/ModVersionDBObject"
                          },
                          "edit": {
                            "$ref": "#/components/schemas/EditApprovalQueueDBObject"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mods": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ModAPIPublicResponse"
                      }
                    },
                    "modVersions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "mod": {
                            "$ref": "#/components/schemas/ModAPIPublicResponse"
                          },
                          "modVersion": {
                            "$ref": "#/components/schemas/ModVersionDBObject"
                          }
                        }
                      }
                    },
                    "edits": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "mod": {
                            "$ref": "#/components/schemas/ModAPIPublicResponse"
                          },
                          "original": {
                            "$ref": "#/components/schemas/ModVersionDBObject"
                          },
                          "edit": {
                            "$ref": "#/components/schemas/EditApprovalQueueDBObject"
                          }
                        }
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No mods found."
          },
          "400": {
            "description": "Missing game name."
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/approval/mod/{modIdParam}/approve": {
      "post": {
        "tags": [
          "Approval"
        ],
        "summary": "Approve a mod.",
        "description": "Approve a mod for public visibility.",
        "parameters": [
          {
            "name": "modIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the mod to approve."
          }
        ],
        "responses": {
          "200": {
            "description": "Mod status updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMessage"
                }
              }
            }
          },
          "400": {
            "description": "Missing status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMessage"
                }
              }
            }
          },
          "404": {
            "description": "Mod not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMessage"
                }
              }
            }
          },
          "500": {
            "description": "Error approving mod.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMessage"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "description": "The status to set the mod to.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The status to set the mod to.",
                    "example": "verified"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The status to set the mod to.",
                    "example": "verified"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/approval/modversion/{modVersionIdParam}/approve": {
      "post": {
        "tags": [
          "Approval"
        ],
        "summary": "Approve a modVersion.",
        "description": "Approve a modVersion for public visibility.",
        "parameters": [
          {
            "name": "modVersionIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the modVersion to approve."
          }
        ],
        "responses": {
          "200": {
            "description": "ModVersion status updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMessage"
                }
              }
            }
          },
          "400": {
            "description": "Missing status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMessage"
                }
              }
            }
          },
          "404": {
            "description": "ModVersion not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMessage"
                }
              }
            }
          },
          "500": {
            "description": "Error approving modVersion.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMessage"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "description": "The status to set the modVersion to.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The status to set the modVersion to.",
                    "example": "verified"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The status to set the modVersion to.",
                    "example": "verified"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/approval/edit/{editIdParam}/approve": {
      "post": {
        "tags": [
          "Approval"
        ],
        "summary": "Approve an edit.",
        "description": "Approve an edit for public visibility.",
        "parameters": [
          {
            "name": "editIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the edit to approve."
          }
        ],
        "responses": {
          "200": {
            "description": "Edit status updated."
          },
          "400": {
            "description": "Missing status."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Edit not found."
          },
          "500": {
            "description": "Error approving edit."
          }
        },
        "requestBody": {
          "required": true,
          "description": "The accepted value.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accepted": {
                    "type": "boolean",
                    "description": "Whether to accept the edit or not."
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "accepted": {
                    "type": "boolean",
                    "description": "Whether to accept the edit or not."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/approval/mod/{modIdParam}": {
      "patch": {
        "tags": [
          "Approval"
        ],
        "summary": "Edit a mod in the approval queue.",
        "description": "Edit a mod in the approval queue.",
        "parameters": [
          {
            "name": "modIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the mod to edit."
          }
        ],
        "responses": {
          "200": {
            "description": "Mod updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mod": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mod": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "No changes provided."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Mod not found."
          },
          "500": {
            "description": "Error updating mod."
          },
          "501": {
            "description": "Not Implemented"
          }
        },
        "requestBody": {
          "required": true,
          "description": "The mod object to update.",
          "content": {
            "application/json": {
              "schema": {
                "name": "string",
                "summary": "string",
                "description": "string",
                "gitUrl": "string",
                "category": "string",
                "gameName": "string",
                "authorIds": [
                  1,
                  2,
                  3
                ]
              }
            },
            "application/xml": {
              "schema": {
                "name": "string",
                "summary": "string",
                "description": "string",
                "gitUrl": "string",
                "category": "string",
                "gameName": "string",
                "authorIds": [
                  1,
                  2,
                  3
                ]
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/approval/modversion/{modVersionIdParam}": {
      "patch": {
        "tags": [
          "Approval"
        ],
        "summary": "Edit a modVersion in the approval queue.",
        "description": "Edit a modVersion in the approval queue.",
        "parameters": [
          {
            "name": "modVersionIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the modVersion to edit."
          }
        ],
        "responses": {
          "200": {
            "description": "ModVersion updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "modVersion": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "modVersion": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "No changes provided."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "ModVersion not found."
          },
          "500": {
            "description": "Error updating modVersion."
          },
          "501": {
            "description": "Not Implemented"
          }
        },
        "requestBody": {
          "required": true,
          "description": "The modVersion object to update.",
          "content": {
            "application/json": {
              "schema": {
                "modVersion": "string",
                "supportedGameVersionIds": [
                  1,
                  2,
                  3
                ],
                "dependencies": [
                  1,
                  2,
                  3
                ],
                "platform": "string"
              }
            },
            "application/xml": {
              "schema": {
                "modVersion": "string",
                "supportedGameVersionIds": [
                  1,
                  2,
                  3
                ],
                "dependencies": [
                  1,
                  2,
                  3
                ],
                "platform": "string"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/approval/edit/{editIdParam}": {
      "patch": {
        "tags": [
          "Approval"
        ],
        "summary": "Edit an edit in the approval queue.",
        "description": "Edit an edit in the approval queue.",
        "parameters": [
          {
            "name": "editIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the edit to edit."
          }
        ],
        "responses": {
          "200": {
            "description": "Edit updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Edit updated."
                    },
                    "edit": {
                      "$ref": "#/components/schemas/EditApprovalQueueDBObject"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Edit updated."
                    },
                    "edit": {
                      "$ref": "#/components/schemas/EditApprovalQueueDBObject"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "No changes provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMessage"
                }
              }
            }
          },
          "404": {
            "description": "Edit not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMessage"
                }
              }
            }
          },
          "500": {
            "description": "Error updating edit.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMessage"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "description": "The edit object to update.",
          "content": {
            "application/json": {
              "schema": {
                "name": "string",
                "summary": "string",
                "description": "string",
                "gitUrl": "string",
                "category": "string",
                "gameName": "string",
                "authorIds": [
                  1,
                  2,
                  3
                ],
                "supportedGameVersionIds": [
                  1,
                  2,
                  3
                ],
                "modVersion": "string",
                "platform": "string",
                "dependencies": [
                  1,
                  2,
                  3
                ]
              }
            },
            "application/xml": {
              "schema": {
                "name": "string",
                "summary": "string",
                "description": "string",
                "gitUrl": "string",
                "category": "string",
                "gameName": "string",
                "authorIds": [
                  1,
                  2,
                  3
                ],
                "supportedGameVersionIds": [
                  1,
                  2,
                  3
                ],
                "modVersion": "string",
                "platform": "string",
                "dependencies": [
                  1,
                  2,
                  3
                ]
              }
            }
          }
        }
      }
    },
    "/approval/modVersion/{modVersionIdParam}/revoke": {
      "post": {
        "tags": [
          "Approval"
        ],
        "summary": "Revoke a modVersion",
        "description": "Revoke a modVersion\\'s verification status.\\n\\nThis will also revoke the verification status of any modVersions that depend on this modVersion.",
        "parameters": [
          {
            "name": "modVersionIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the modVersion to revoke."
          },
          {
            "name": "allowDependants",
            "description": "Allow dependants to remain verified. This is dangerous.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ModVersion revoked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "allowDependants": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/motd": {
      "get": {
        "tags": [
          "MOTD"
        ],
        "description": "",
        "parameters": [
          {
            "name": "gameName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "tags": [
          "MOTD"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/motd/{id}": {
      "delete": {
        "tags": [
          "MOTD"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get logged in user information.",
        "description": "Get user information.",
        "responses": {
          "200": {
            "description": "Returns user information."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user information.",
        "description": "Get user information.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns user information."
          },
          "400": {
            "description": "Invalid parameters."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/user/{id}/mods": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user information.",
        "description": "Get user information.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID."
          },
          {
            "name": "status",
            "description": "Status of the mod.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platform",
            "description": "Platform of the mod.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns mods."
          },
          "400": {
            "description": "Invalid parameters."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/bbmStatusForBbmAlsoPinkEraAndLillieAreCuteBtwWilliamGay": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Get API status.",
        "description": "Get API status.",
        "responses": {
          "200": {
            "description": "Returns API status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIStatus"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/APIStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ba/addGameVersion": {
      "post": {
        "tags": [
          "Bulk Actions"
        ],
        "summary": "Add a game version to multiple mod versions",
        "description": "Add a game version to multiple mod versions. Submits edits if the mod is already approved, otherwise queues an edit for approval. Requires the user to be an approver.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "editIds": {
                      "type": "array",
                      "example": [
                        1,
                        2
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "errorIds": {
                      "type": "array",
                      "example": [
                        3
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "editPreformedIds": {
                      "type": "array",
                      "example": [
                        4
                      ],
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "editIds": {
                      "type": "array",
                      "example": [
                        1,
                        2
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "errorIds": {
                      "type": "array",
                      "example": [
                        3
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "editPreformedIds": {
                      "type": "array",
                      "example": [
                        4
                      ],
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gameVersionId": {
                    "type": "number"
                  },
                  "modVersionIds": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ba/linkVersionsExclude": {
      "post": {
        "tags": [
          "Bulk Actions"
        ],
        "summary": "",
        "description": "Submits edits if the mod is already approved, otherwise queues an edit for approval. Requires the user to be an approver.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "editIds": {
                      "type": "array",
                      "example": [
                        1,
                        2
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "errorIds": {
                      "type": "array",
                      "example": [
                        3
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "editPreformedIds": {
                      "type": "array",
                      "example": [
                        4
                      ],
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "editIds": {
                      "type": "array",
                      "example": [
                        1,
                        2
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "errorIds": {
                      "type": "array",
                      "example": [
                        3
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "editPreformedIds": {
                      "type": "array",
                      "example": [
                        4
                      ],
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gameVersionIdFrom": {
                    "type": "number"
                  },
                  "gameVersionIdTo": {
                    "type": "number"
                  },
                  "modVersionIdsToExclude": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ba/approveEdits": {
      "post": {
        "tags": [
          "Bulk Actions"
        ],
        "summary": "Approve multiple edit requests",
        "description": "Approve multiple edit requests. Requires the user to be an approver.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "successIds": {
                      "type": "array",
                      "example": [
                        1,
                        2
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "errorIds": {
                      "type": "array",
                      "example": [
                        3
                      ],
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "successIds": {
                      "type": "array",
                      "example": [
                        1,
                        2
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "errorIds": {
                      "type": "array",
                      "example": [
                        3
                      ],
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "approve": {
                    "type": "boolean",
                    "default": true
                  },
                  "editIds": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ModAPIPublicResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The object's internal ID.",
            "example": 1,
            "minimum": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the mod.",
            "example": "Example Mod"
          },
          "summary": {
            "type": "string",
            "description": "The summary of the mod.",
            "example": "This is an example mod."
          },
          "description": {
            "type": "string",
            "description": "The description of the mod. Supports markdown.",
            "example": "This is an example mod."
          },
          "gameName": {
            "type": "string",
            "description": "The name of the game this mod is for. This is used to identify the game.",
            "example": "BeatSaber",
            "default": "BeatSaber"
          },
          "category": {
            "type": "string",
            "enum": [
              "core",
              "essential",
              "library",
              "cosmetic",
              "practice",
              "gameplay",
              "streamtools",
              "ui",
              "lighting",
              "tweaks",
              "multiplayer",
              "text",
              "editor",
              "other"
            ]
          },
          "authors": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserAPIPublicResponse"
                }
              ]
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "private",
              "removed",
              "unverified",
              "verified"
            ]
          },
          "iconFileName": {
            "type": "string",
            "default": "default.png"
          },
          "gitUrl": {
            "type": "string"
          },
          "lastApprovedById": {
            "type": [
              "integer",
              "null"
            ],
            "default": null
          },
          "lastUpdatedById": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "description": "The date the object was added to the database.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date the object was last updated.",
            "example": "2023-10-01T00:00:00.000Z"
          }
        }
      },
      "ModVersionAPIPublicResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The object's internal ID.",
            "example": 1,
            "minimum": 1
          },
          "modId": {
            "type": "integer",
            "description": "The parent mod's internal ID.",
            "example": 1
          },
          "modVersion": {
            "type": "string",
            "description": "The version string. This is used to identify the version of the mod. This must be SemVer compliant.",
            "example": "1.0.0"
          },
          "author": {
            "$ref": "#/components/schemas/UserAPIPublicResponse"
          },
          "platform": {
            "type": "string",
            "enum": [
              "steampc",
              "oculuspc",
              "universalpc",
              "universalquest"
            ]
          },
          "zipHash": {
            "type": "string",
            "description": "The hash of the zip file. This is used to find and download the zip file. Will be a MD5 hash.",
            "example": "34e6985de8fbf7b525fc841c2cb45786"
          },
          "contentHashes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string"
                },
                "hash": {
                  "type": "string"
                }
              }
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "private",
              "removed",
              "unverified",
              "verified"
            ]
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "The ID of the mod version this version depends on."
            }
          },
          "supportedGameVersions": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GameVersionAPIPublicResponse"
                }
              ]
            }
          },
          "downloadCount": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "description": "The date the object was added to the database.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date the object was last updated.",
            "example": "2023-10-01T00:00:00.000Z"
          }
        }
      },
      "UserAPIPublicResponse": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The user's username from GitHub.",
            "example": "saeraphinx"
          },
          "githubId": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The user's GitHub ID.",
            "example": 123456789
          },
          "sponsorUrl": {
            "type": [
              "string",
              "null"
            ],
            "description": "The URL to support the user's works financially.",
            "example": "https://www.patreon.com/c/beatsabermods",
            "default": null
          },
          "displayName": {
            "type": "string",
            "description": "The user's display name from GitHub. Is editable after registration, and can be different from the GitHub username/display name.",
            "example": "Saeraphinx"
          },
          "roles": {
            "type": "object",
            "properties": {
              "siteide": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "allpermissions",
                    "admin",
                    "poster",
                    "approver",
                    "moderator",
                    "banned"
                  ]
                },
                "default": [],
                "example": [
                  "admin"
                ],
                "description": "Site-wide roles. Takes precedence over per-game roles."
              },
              "perGame": {
                "type": "object",
                "example": {
                  "BeatSaber": [
                    "approver"
                  ]
                }
              }
            },
            "default": {
              "siteide": [],
              "perGame": {}
            },
            "example": {
              "siteide": [
                "admin"
              ],
              "perGame": {
                "BeatSaber": [
                  "approver"
                ]
              }
            }
          },
          "bio": {
            "type": "string",
            "description": "The user's bio from GitHub. Is editable after registration. Supports markdown.",
            "example": "j"
          },
          "id": {
            "type": "integer",
            "description": "The object's internal ID.",
            "example": 1,
            "minimum": 1
          },
          "createdAt": {
            "type": "string",
            "description": "The date the object was added to the database.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date the object was last updated.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "deletedAt": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date the object was deleted from the database.",
            "example": "2023-10-01T00:00:00.000Z"
          }
        }
      },
      "GameVersionAPIPublicResponse": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string",
            "description": "The name of the game this version is for. This is used to identify the game.",
            "example": "BeatSaber"
          },
          "version": {
            "type": "string",
            "description": "The version string. This is used to identify the version of the game.",
            "example": "1.0.0"
          },
          "id": {
            "type": "integer",
            "description": "The object's internal ID.",
            "example": 1,
            "minimum": 1
          },
          "createdAt": {
            "type": "string",
            "description": "The date the object was added to the database.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date the object was last updated.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "deletedAt": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date the object was deleted from the database.",
            "example": "2023-10-01T00:00:00.000Z"
          }
        }
      },
      "CreateEditModVersion": {
        "type": "object",
        "properties": {
          "modVersion": {
            "type": "string",
            "description": "The version string. This is used to identify the version of the mod. This must be SemVer compliant.",
            "example": "1.0.0"
          },
          "platform": {
            "type": "string",
            "enum": [
              "steampc",
              "oculuspc",
              "universalpc",
              "universalquest"
            ]
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "The ID of the mod version this version depends on."
            }
          },
          "supportedGameVersionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "The ID of the game version this version supports."
            }
          }
        }
      },
      "CreateMod": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the mod.",
            "example": "Example Mod"
          },
          "summary": {
            "type": "string",
            "description": "The summary of the mod.",
            "example": "This is an example mod."
          },
          "description": {
            "type": "string",
            "description": "The description of the mod. Supports markdown.",
            "example": "This is an example mod."
          },
          "gameName": {
            "type": "string",
            "description": "The name of the game this mod is for. This is used to identify the game.",
            "example": "BeatSaber",
            "default": "BeatSaber"
          },
          "category": {
            "type": "string",
            "enum": [
              "core",
              "essential",
              "library",
              "cosmetic",
              "practice",
              "gameplay",
              "streamtools",
              "ui",
              "lighting",
              "tweaks",
              "multiplayer",
              "text",
              "editor",
              "other"
            ]
          },
          "gitUrl": {
            "type": "string"
          }
        }
      },
      "EditMod": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the mod.",
            "example": "Example Mod"
          },
          "summary": {
            "type": "string",
            "description": "The summary of the mod.",
            "example": "This is an example mod."
          },
          "description": {
            "type": "string",
            "description": "The description of the mod. Supports markdown.",
            "example": "This is an example mod."
          },
          "gameName": {
            "type": "string",
            "description": "The name of the game this mod is for. This is used to identify the game.",
            "example": "BeatSaber",
            "default": "BeatSaber"
          },
          "category": {
            "type": "string",
            "enum": [
              "core",
              "essential",
              "library",
              "cosmetic",
              "practice",
              "gameplay",
              "streamtools",
              "ui",
              "lighting",
              "tweaks",
              "multiplayer",
              "text",
              "editor",
              "other"
            ]
          },
          "gitUrl": {
            "type": "string"
          },
          "authorIds": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      },
      "APIStatus": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Status message.",
            "example": "API is running.",
            "default": "API is running."
          },
          "veryImportantMessage": {
            "type": "string",
            "description": "Very important message.",
            "example": "pink cute, era cute, lillie cute, william gay",
            "default": "pink cute, era cute, lillie cute, william gay"
          },
          "apiVersion": {
            "type": "string",
            "description": "API version (as seen in documentation).",
            "example": "0.0.1",
            "default": "Version not found."
          },
          "gitVersion": {
            "type": "string",
            "description": "Git commit hash.",
            "example": "3d94a00",
            "default": "Version not found."
          },
          "isDocker": {
            "type": "boolean",
            "description": "Whether the API is running in Docker or not.",
            "example": true,
            "default": false
          }
        }
      },
      "ModDBObject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the mod.",
            "example": "Example Mod"
          },
          "summary": {
            "type": "string",
            "description": "The summary of the mod.",
            "example": "This is an example mod."
          },
          "description": {
            "type": "string",
            "description": "The description of the mod. Supports markdown.",
            "example": "This is an example mod."
          },
          "gameName": {
            "type": "string",
            "description": "The name of the game this mod is for. This is used to identify the game.",
            "example": "BeatSaber",
            "default": "BeatSaber"
          },
          "category": {
            "type": "string",
            "enum": [
              "core",
              "essential",
              "library",
              "cosmetic",
              "practice",
              "gameplay",
              "streamtools",
              "ui",
              "lighting",
              "tweaks",
              "multiplayer",
              "text",
              "editor",
              "other"
            ]
          },
          "authorIds": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "private",
              "removed",
              "unverified",
              "verified"
            ]
          },
          "iconFileName": {
            "type": "string",
            "default": "default.png"
          },
          "gitUrl": {
            "type": "string"
          },
          "lastApprovedById": {
            "type": [
              "integer",
              "null"
            ],
            "default": null
          },
          "lastUpdatedById": {
            "type": "integer"
          },
          "id": {
            "type": "integer",
            "description": "The object's internal ID.",
            "example": 1,
            "minimum": 1
          },
          "createdAt": {
            "type": "string",
            "description": "The date the object was added to the database.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date the object was last updated.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "deletedAt": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date the object was deleted from the database.",
            "example": "2023-10-01T00:00:00.000Z"
          }
        }
      },
      "ModVersionDBObject": {
        "type": "object",
        "properties": {
          "modId": {
            "type": "integer",
            "description": "The parent mod's internal ID.",
            "example": 1
          },
          "modVersion": {
            "type": "string",
            "description": "The version string. This is used to identify the version of the mod. This must be SemVer compliant.",
            "example": "1.0.0"
          },
          "authorId": {
            "type": "integer",
            "description": "The ID of the user who authored this version."
          },
          "platform": {
            "type": "string",
            "enum": [
              "steampc",
              "oculuspc",
              "universalpc",
              "universalquest"
            ]
          },
          "zipHash": {
            "type": "string",
            "description": "The hash of the zip file. This is used to find and download the zip file. Will be a MD5 hash.",
            "example": "34e6985de8fbf7b525fc841c2cb45786"
          },
          "contentHashes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string"
                },
                "hash": {
                  "type": "string"
                }
              }
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "private",
              "removed",
              "unverified",
              "verified"
            ]
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "The ID of the mod version this version depends on."
            }
          },
          "supportedGameVersionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "The ID of the game version this version supports."
            }
          },
          "downloadCount": {
            "type": "integer"
          },
          "id": {
            "type": "integer",
            "description": "The object's internal ID.",
            "example": 1,
            "minimum": 1
          },
          "createdAt": {
            "type": "string",
            "description": "The date the object was added to the database.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date the object was last updated.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "deletedAt": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date the object was deleted from the database.",
            "example": "2023-10-01T00:00:00.000Z"
          }
        }
      },
      "UserDBObject": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The user's username from GitHub.",
            "example": "saeraphinx"
          },
          "githubId": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The user's GitHub ID.",
            "example": 123456789
          },
          "sponsorUrl": {
            "type": [
              "string",
              "null"
            ],
            "description": "The URL to support the user's works financially.",
            "example": "https://www.patreon.com/c/beatsabermods",
            "default": null
          },
          "displayName": {
            "type": "string",
            "description": "The user's display name from GitHub. Is editable after registration, and can be different from the GitHub username/display name.",
            "example": "Saeraphinx"
          },
          "roles": {
            "type": "object",
            "properties": {
              "siteide": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "allpermissions",
                    "admin",
                    "poster",
                    "approver",
                    "moderator",
                    "banned"
                  ]
                },
                "default": [],
                "example": [
                  "admin"
                ],
                "description": "Site-wide roles. Takes precedence over per-game roles."
              },
              "perGame": {
                "type": "object",
                "example": {
                  "BeatSaber": [
                    "approver"
                  ]
                }
              }
            },
            "default": {
              "siteide": [],
              "perGame": {}
            },
            "example": {
              "siteide": [
                "admin"
              ],
              "perGame": {
                "BeatSaber": [
                  "approver"
                ]
              }
            }
          },
          "bio": {
            "type": "string",
            "description": "The user's bio from GitHub. Is editable after registration. Supports markdown.",
            "example": "j"
          },
          "id": {
            "type": "integer",
            "description": "The object's internal ID.",
            "example": 1,
            "minimum": 1
          },
          "createdAt": {
            "type": "string",
            "description": "The date the object was added to the database.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date the object was last updated.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "deletedAt": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date the object was deleted from the database.",
            "example": "2023-10-01T00:00:00.000Z"
          }
        }
      },
      "GameVersionDBObject": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string",
            "description": "The name of the game this version is for. This is used to identify the game.",
            "example": "BeatSaber"
          },
          "version": {
            "type": "string",
            "description": "The version string. This is used to identify the version of the game.",
            "example": "1.0.0"
          },
          "id": {
            "type": "integer",
            "description": "The object's internal ID.",
            "example": 1,
            "minimum": 1
          },
          "createdAt": {
            "type": "string",
            "description": "The date the object was added to the database.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date the object was last updated.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "deletedAt": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date the object was deleted from the database.",
            "example": "2023-10-01T00:00:00.000Z"
          }
        }
      },
      "EditApprovalQueueDBObject": {
        "type": "object",
        "properties": {
          "submitterId": {
            "type": "integer",
            "description": "The ID of the user who submitted this edit."
          },
          "objectId": {
            "type": "integer",
            "description": "The ID of the object being edited."
          },
          "objectTableName": {
            "type": "string",
            "description": "The name of the table that objectId belongs to."
          },
          "object": {
            "type": "object",
            "properties": {
              "modVersion": {
                "type": "string",
                "description": "The version string. This is used to identify the version of the mod. This must be SemVer compliant.",
                "example": "1.0.0"
              },
              "platform": {
                "type": "string",
                "enum": [
                  "steampc",
                  "oculuspc",
                  "universalpc",
                  "universalquest"
                ]
              },
              "dependnecies": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "description": "The ID of the mod version this version depends on."
                }
              },
              "supportedGameVersionIds": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "description": "The ID of the game version this version supports."
                }
              },
              "name": {
                "type": "string",
                "description": "The name of the mod.",
                "example": "Example Mod"
              },
              "summary": {
                "type": "string",
                "description": "The summary of the mod.",
                "example": "This is an example mod."
              },
              "description": {
                "type": "string",
                "description": "The description of the mod. Supports markdown.",
                "example": "This is an example mod."
              },
              "gameName": {
                "type": "string",
                "description": "The name of the game this mod is for. This is used to identify the game.",
                "example": "BeatSaber",
                "default": "BeatSaber"
              },
              "category": {
                "type": "string",
                "enum": [
                  "core",
                  "essential",
                  "library",
                  "cosmetic",
                  "practice",
                  "gameplay",
                  "streamtools",
                  "ui",
                  "lighting",
                  "tweaks",
                  "multiplayer",
                  "text",
                  "editor",
                  "other"
                ]
              },
              "authorIds": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "gitUrl": {
                "type": "string"
              }
            }
          },
          "approverId": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The ID of the user who approved this edit.",
            "default": null,
            "example": 1
          },
          "approved": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether the edit has been approved or not.",
            "example": false,
            "default": null
          },
          "id": {
            "type": "integer",
            "description": "The object's internal ID.",
            "example": 1,
            "minimum": 1
          },
          "createdAt": {
            "type": "string",
            "description": "The date the object was added to the database.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date the object was last updated.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "deletedAt": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date the object was deleted from the database.",
            "example": "2023-10-01T00:00:00.000Z"
          }
        }
      },
      "ServerMessage": {
        "type": "object",
        "description": "A simple message from the server. Indicates anything from a successful operation to an error message. Most, if not all, endpoints will return this in the event of an error.",
        "properties": {
          "message": {
            "type": "string",
            "description": "The message to be displayed."
          }
        },
        "additionalProperties": true,
        "example": {
          "message": "string"
        }
      }
    }
  }
}