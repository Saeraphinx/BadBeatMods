{
  "openapi": "3.1.0",
  "info": {
    "title": "BadBeatMods API",
    "description": "This isn't really fully complete, but its better than absolutely nothing.\n\nThis API documentation is automatically generated and therefor may not be 100% accurate and may be missing a few fields. For example, request bodies are not fully fleshed out, and may not be accurate. Full documentation is still currently a work in progress.\n\nAll errors that originate from the server will have a `message` field. Errors that come from input validation will sometimes also have an `errors` field. This has been omiitted from the documentation of most endpoints for brevity. These follow the `ServerMessage` schema.",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://bbm.saera.gay/api"
    }
  ],
  "tags": [
    {
      "name": "Status",
      "description": "Status related endpoints"
    },
    {
      "name": "Mods",
      "description": ""
    },
    {
      "name": "Versions",
      "description": "Version Management"
    },
    {
      "name": "Approval",
      "description": "Approval related endpoints"
    },
    {
      "name": "Users",
      "description": "User related endpoints"
    },
    {
      "name": "Admin",
      "description": "Admin related endpoints"
    },
    {
      "name": "Bulk Actions",
      "description": "Actions that allow you to skip calling the same endpoint over and over again"
    },
    {
      "name": "Auth",
      "description": "Authentication related endpoints"
    },
    {
      "name": "BeatMods",
      "description": "Legacy BeatMods API endpoints"
    }
  ],
  "paths": {
    "/beatmods/mod": {
      "get": {
        "tags": [
          "BeatMods"
        ],
        "summary": "Legacy BeatMods API endpoint.",
        "description": "Legacy BeatMods API endpoint. This is available for mod downloaders that have not been updated to use the new API.<br><br>This endpoint does not work the same way as the old BeatMods API, but it should be close enough to work with most mod downloaders.",
        "parameters": [
          {
            "name": "gameVersion",
            "description": "The game version as a string (ex. '1.29.1', '1.40.0').",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The statuses to return. Available statuses are: 'approved' & 'all'",
            "format": "string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all mods."
          },
          "400": {
            "description": "Missing Game Version."
          }
        },
        "deprecated": true
      }
    },
    "/v1/mod": {
      "get": {
        "tags": [
          "BeatMods"
        ],
        "summary": "Legacy BeatMods API endpoint.",
        "description": "Legacy BeatMods API endpoint. This is available for mod downloaders that have not been updated to use the new API.<br><br>This endpoint does not work the same way as the old BeatMods API, but it should be close enough to work with most mod downloaders.",
        "parameters": [
          {
            "name": "gameVersion",
            "description": "The game version as a string (ex. '1.29.1', '1.40.0').",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The statuses to return. Available statuses are: 'approved' & 'all'",
            "format": "string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all mods."
          },
          "400": {
            "description": "Missing Game Version."
          }
        },
        "deprecated": true
      }
    },
    "/beatmods/versions": {
      "get": {
        "tags": [
          "BeatMods"
        ],
        "summary": "Legacy BeatMods API Version endpoint.",
        "description": "Legacy BeatMods API endpoint. This is available for mod downloaders that have not been updated to use the new API.<br><br>This endpoint does not work the same way as the old BeatMods API, but it should be close enough to work with most mod downloaders.",
        "responses": {
          "200": {
            "description": "Returns all versions."
          }
        },
        "deprecated": true
      }
    },
    "/versions.json": {
      "get": {
        "tags": [
          "BeatMods"
        ],
        "summary": "Legacy BeatMods API Version endpoint.",
        "description": "Legacy BeatMods API endpoint. This is available for mod downloaders that have not been updated to use the new API.<br><br>This endpoint does not work the same way as the old BeatMods API, but it should be close enough to work with most mod downloaders.",
        "responses": {
          "200": {
            "description": "Returns all versions."
          }
        },
        "deprecated": true
      }
    },
    "/beatmods/aliases": {
      "get": {
        "tags": [
          "BeatMods"
        ],
        "summary": "Legacy BeatMods API Aliases endpoint.",
        "description": "Legacy BeatMods API endpoint. This is available for mod downloaders that have not been updated to use the new API.<br><br>This endpoint does not work the same way as the old BeatMods API, but it should be close enough to work with most mod downloaders.",
        "responses": {
          "200": {
            "description": "Returns all aliases."
          }
        },
        "deprecated": true
      }
    },
    "/aliases.json": {
      "get": {
        "tags": [
          "BeatMods"
        ],
        "summary": "Legacy BeatMods API Aliases endpoint.",
        "description": "Legacy BeatMods API endpoint. This is available for mod downloaders that have not been updated to use the new API.<br><br>This endpoint does not work the same way as the old BeatMods API, but it should be close enough to work with most mod downloaders.",
        "responses": {
          "200": {
            "description": "Returns all aliases."
          }
        },
        "deprecated": true
      }
    },
    "/mods": {
      "get": {
        "tags": [
          "Mods"
        ],
        "summary": "Get all mods for a specified version.",
        "description": "Get all mods.<br><br>If gameName is not provided, it will default to Beat Saber.<br>If gameVersion is not provided, it will default to whatever is set as the lastest version for the selected game.",
        "parameters": [
          {
            "name": "gameName",
            "description": "The game name.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gameVersion",
            "description": "The game version (ex. '1.29.1', '1.40.0'). This parameter is required for dependency resolution to work.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "description": "The mod status. (ex. 'all', 'verified', 'unverified', 'pending')",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platform",
            "description": "The platform. (ex. 'pc', 'oculus')",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the mods.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mods": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProjectVersionPair"
                      }
                    },
                    "total": {
                      "type": "number",
                      "description": "The total number of mods before checking dependencies."
                    },
                    "invalidCount": {
                      "type": "number",
                      "description": "The number of mods that were removed due to missing dependencies."
                    },
                    "invalidIds": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "description": "The IDs of the versions that were removed due to missing dependencies."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/multi/versions": {
      "get": {
        "tags": [
          "Mods"
        ],
        "summary": "Get multiple versions by ID.",
        "description": "Get multiple versions by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The version IDs. Can be specified multiple times.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "$ref": "#/components/parameters/raw"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the version and the parent project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectVersionPair"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/hashlookup": {
      "get": {
        "tags": [
          "Mods"
        ],
        "summary": "Get a specific mod version that has a file with the specified hash.",
        "description": "Get a specific mod version that has a file with the specified hash. This is useful for finding the mod that a file belongs to.",
        "parameters": [
          {
            "name": "hash",
            "description": "The hash to look up.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/raw"
          },
          {
            "name": "status",
            "description": "Only show versions with these statuses.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the mod version.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VersionAPIPublicResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/multi/hashlookup": {
      "get": {
        "tags": [
          "Mods"
        ],
        "summary": "Get a specific mod version that has a file with the specified hash.",
        "description": "Look up multiple hashes at once, and sort the results by hash. Developed for PinkModManager.",
        "parameters": [
          {
            "name": "hash",
            "description": "The hash to look up. Can be repeated",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "description": "Only show versions with these statuses.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the mod version."
          },
          "400": {
            "description": "Missing hash."
          },
          "404": {
            "description": "Hash not found."
          }
        }
      }
    },
    "/projects/{projectIdParam}": {
      "get": {
        "tags": [
          "Mods"
        ],
        "summary": "Get a specific project by ID.",
        "description": "Get a specific project by ID. This will also return every version associated with the project.",
        "parameters": [
          {
            "name": "projectIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The project ID."
          },
          {
            "$ref": "#/components/parameters/raw"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProjectVersionsPairResponse",
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Mods"
        ],
        "description": "Edit a project.",
        "parameters": [
          {
            "name": "projectIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Project updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEditResponse"
                }
              }
            }
          },
          "202": {
            "description": "Project edit submitted for approval.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditApprovalQueueResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "description": "Project data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/zUpdateProject"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/zUpdateProject"
              }
            }
          }
        }
      }
    },
    "/versions/{versionIdParam}": {
      "get": {
        "tags": [
          "Mods"
        ],
        "summary": "Get a specific version by ID.",
        "description": "Get a specific version by ID.",
        "parameters": [
          {
            "name": "versionIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The version ID."
          },
          {
            "$ref": "#/components/parameters/raw"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProjectVersionPairResponse",
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/projects/create": {
      "post": {
        "tags": [
          "Mods"
        ],
        "summary": "Create a project.",
        "description": "Create a project.",
        "parameters": [
          {
            "name": "icon",
            "in": "formData",
            "description": "Project icon.",
            "required": false,
            "schema": {
              "type": "file"
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/zCreateProject"
              }
            }
          }
        }
      }
    },
    "/projects/{projectIdParam}/create": {
      "post": {
        "tags": [
          "Mods"
        ],
        "summary": "Upload a version.",
        "description": "Upload a new version to a project.",
        "parameters": [
          {
            "name": "projectIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID."
          },
          {
            "name": "file",
            "in": "formData",
            "description": "Version zip file.",
            "required": true,
            "schema": {
              "type": "file"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProjectVersionPairResponse",
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "413": {
            "description": "Payload Too Large"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/zUpdateVersion"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/zUpdateVersion"
              }
            }
          }
        }
      }
    },
    "/projects/{projectIdParam}/icon": {
      "post": {
        "tags": [
          "Mods"
        ],
        "summary": "Update a project icon.",
        "description": "Update a project icon. (Note: This endpoint does not work on the API documentation page.)",
        "parameters": [
          {
            "name": "projectIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID."
          },
          {
            "name": "icon",
            "in": "formData",
            "description": "Project icon.",
            "required": true,
            "schema": {
              "type": "file"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Icon updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEditResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "413": {
            "description": "Payload Too Large"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/version/{versionIdParam}": {
      "patch": {
        "tags": [
          "Mods"
        ],
        "description": "Update a version.",
        "parameters": [
          {
            "name": "versionIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Version ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Version updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionEditResponse"
                }
              }
            }
          },
          "202": {
            "description": "Version edit submitted for approval.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditApprovalQueueResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "description": "Version data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/zUpdateVersion"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/zUpdateVersion"
              }
            }
          }
        }
      }
    },
    "/projects/{projectIdParam}/submit": {
      "post": {
        "tags": [
          "Mods"
        ],
        "description": "Submit a project for approval.",
        "parameters": [
          {
            "name": "projectIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Project submitted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEditResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/versions/{versionIdParam}/submit": {
      "post": {
        "tags": [
          "Mods"
        ],
        "description": "Submit a version for approval.",
        "parameters": [
          {
            "name": "versionIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Version ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Version submitted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionEditResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/edits": {
      "get": {
        "tags": [
          "Mods"
        ],
        "description": "Get all edits.",
        "responses": {
          "200": {
            "description": "Edits found successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "edits": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EditApprovalQueueResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/edits/{editIdParam}": {
      "get": {
        "tags": [
          "Mods"
        ],
        "description": "Get an edit.",
        "parameters": [
          {
            "name": "editIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Edit ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Edit found successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "edit": {
                      "$ref": "#/components/schemas/EditApprovalQueueResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Mods"
        ],
        "description": "Delete an edit.",
        "parameters": [
          {
            "name": "editIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Edit ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/auth": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get logged in user information.",
        "description": "Get user information.",
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/components/responses/UserResponse"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/auth/github": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "",
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/auth/github/callback": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/auth/discord": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "",
        "responses": {
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/auth/discord/callback": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout.",
        "description": "Logout.",
        "responses": {
          "200": {
            "description": "Logout successful."
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/games": {
      "get": {
        "tags": [
          "Versions"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/versions": {
      "get": {
        "tags": [
          "Versions"
        ],
        "description": "",
        "parameters": [
          {
            "name": "gameName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Versions"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "description": "The gameName and version to create",
          "required": true,
          "type": "object",
          "content": {
            "application/json": {
              "schema": {
                "gameName": "BeatSaber",
                "version": "1.0.0"
              }
            },
            "application/xml": {
              "schema": {
                "gameName": "BeatSaber",
                "version": "1.0.0"
              }
            }
          }
        }
      }
    },
    "/versions/default": {
      "get": {
        "tags": [
          "Versions"
        ],
        "description": "",
        "parameters": [
          {
            "name": "gameName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "tags": [
          "Versions"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "description": "The ID of the version to set as default",
          "required": true,
          "type": "object",
          "content": {
            "application/json": {
              "schema": {
                "gameVersionId": 1
              }
            },
            "application/xml": {
              "schema": {
                "gameVersionId": 1
              }
            }
          }
        }
      }
    },
    "/admin/health/hashCheck": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Check if all hashes are valid & present.",
        "description": "Check if all hashes are valid & their files are still present on the server.",
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/components/responses/ServerMessage"
          },
          "500": {
            "description": "Internal Server Error",
            "$ref": "#/components/responses/ServerMessageWithErrorStringArray"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/admin/health/missingIcons": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Check if all icons are valid & present.",
        "description": "Check if all icons are valid & their files are still present on the server.",
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/components/responses/ServerMessage"
          },
          "500": {
            "description": "Internal Server Error",
            "$ref": "#/components/responses/ServerMessageWithErrorStringArray"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/admin/health/dependencyResolution": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "",
        "parameters": [
          {
            "name": "versionId",
            "description": "The version ID to check.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gameName",
            "description": "The game name to check.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeUnverified",
            "description": "Include unverified mods.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/admin/sortgameversions": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Sort game versions.",
        "description": "Sort game versions within versions by a gameversions version using SemVer",
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/components/responses/ServerMessage"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/admin/database/loadBlankFileSizes": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Load blank file sizes into the database.",
        "description": "Check each record in the modVersions table. If the file size is 0, attempt to get the file size from the zip file.",
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/components/responses/ServerMessage"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/admin/users/addRole": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Add a role to a user.",
        "description": "Add a role to a user.",
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/components/responses/ServerMessage"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/zUpdateUserRoles"
              }
            }
          }
        }
      }
    },
    "/admin/users/removeRole": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Remove a role from a user.",
        "description": "Remove a role from a user.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/zUpdateUserRoles"
              }
            }
          }
        }
      }
    },
    "/admin/versions/moveVersion": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Move a mod version to a new mod.",
        "description": "Move a mod version to a new mod.",
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/components/responses/ServerMessage"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "versionId": {
                    "type": "number",
                    "description": "The mod version ID to move."
                  },
                  "newModId": {
                    "type": "number",
                    "description": "The new mod ID to move the version to."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/approval/{queueType}": {
      "get": {
        "tags": [
          "Approval"
        ],
        "summary": "Get new projects & versions pending approval.",
        "description": "Get a list of projects & versions pending their first approval.",
        "parameters": [
          {
            "name": "queueType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "projects",
                "verisons",
                "edits"
              ]
            },
            "description": "The type of queue to get."
          },
          {
            "name": "includeUnverified",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gameName",
            "description": "The name of the game to get new projects/versions for.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/components/responses/ApprovalQueueResponse"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/approval/project/{projectIdParam}/approve": {
      "post": {
        "tags": [
          "Approval"
        ],
        "summary": "Approve a project.",
        "description": "Approve a project for public visibility.",
        "parameters": [
          {
            "name": "projectIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the project to approve."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/components/responses/ServerMessage"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ApproveObjectBody"
        }
      }
    },
    "/approval/version/{versionIdParam}/approve": {
      "post": {
        "tags": [
          "Approval"
        ],
        "summary": "Approve a version.",
        "description": "Approve a version for public visibility.",
        "parameters": [
          {
            "name": "versionIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the version to approve."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/components/responses/ServerMessage"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ApproveObjectBody"
        }
      }
    },
    "/approval/edit/{editIdParam}/approve": {
      "post": {
        "tags": [
          "Approval"
        ],
        "summary": "Approve an edit.",
        "description": "Approve an edit for public visibility.",
        "parameters": [
          {
            "name": "editIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the edit to approve."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/components/responses/ServerMessage"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The action to take on the edit.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "enum": [
                      "accept",
                      "deny"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/approval/edit/{editIdParam}": {
      "patch": {
        "tags": [
          "Approval"
        ],
        "summary": "Edit an edit in the approval queue.",
        "description": "Edit an edit in the approval queue.",
        "parameters": [
          {
            "name": "editIdParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the edit to edit."
          }
        ],
        "responses": {
          "200": {
            "description": "Edit updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "edit": {
                      "$ref": "#/components/schemas/EditApprovalQueueDBObject"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The edit object to update.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "summary": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "gitUrl": {
                    "type": "string"
                  },
                  "category": {
                    "type": "string"
                  },
                  "authorIds": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "gameName": {
                    "type": "string"
                  },
                  "modVersion": {
                    "type": "string"
                  },
                  "supportedGameVersionIds": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "dependencies": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "parentId": {
                          "type": "integer"
                        },
                        "sv": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "platform": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get logged in user information.",
        "description": "Get user information.",
        "responses": {
          "200": {
            "description": "Returns user information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAPIPublicResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user information.",
        "description": "Get user information.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/components/responses/UserResponse"
          },
          "400": {
            "description": "Invalid parameters."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/user/{id}/mods": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user information.",
        "description": "Get user information.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID."
          },
          {
            "name": "status",
            "description": "Only show this status.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns mods.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectVersionPair"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters."
          },
          "404": {
            "description": "User not found."
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users.",
        "description": "Get all users.",
        "parameters": [
          {
            "name": "username",
            "description": "Username to search for.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAPIPublicResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/bbmStatusForBbmAlsoPinkEraAndLillieAreCuteBtwWilliamGay": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Get API status.",
        "description": "Get API status.",
        "responses": {
          "200": {
            "description": "Returns API status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ]
      }
    },
    "/ba/addGameVersion": {
      "post": {
        "tags": [
          "Bulk Actions"
        ],
        "summary": "Add a game version to multiple versions",
        "description": "Add a game version to multiple versions. Submits edits if the version is already approved, otherwise queues an edit for approval. Requires the user to be an approver.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "editIds": {
                      "type": "array",
                      "example": [
                        1,
                        2
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "errorIds": {
                      "type": "array",
                      "example": [
                        3
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "editPreformedIds": {
                      "type": "array",
                      "example": [
                        4
                      ],
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "editIds": {
                      "type": "array",
                      "example": [
                        1,
                        2
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "errorIds": {
                      "type": "array",
                      "example": [
                        3
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "editPreformedIds": {
                      "type": "array",
                      "example": [
                        4
                      ],
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gameVersionId": {
                    "type": "number"
                  },
                  "versionIds": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ba/linkVersionsExclude": {
      "post": {
        "tags": [
          "Bulk Actions"
        ],
        "summary": "",
        "description": "Submits edits if the version is already approved, otherwise queues an edit for approval. Requires the user to be an approver.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "editIds": {
                      "type": "array",
                      "example": [
                        1,
                        2
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "errorIds": {
                      "type": "array",
                      "example": [
                        3
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "editPreformedIds": {
                      "type": "array",
                      "example": [
                        4
                      ],
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "editIds": {
                      "type": "array",
                      "example": [
                        1,
                        2
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "errorIds": {
                      "type": "array",
                      "example": [
                        3
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "editPreformedIds": {
                      "type": "array",
                      "example": [
                        4
                      ],
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gameVersionIdFrom": {
                    "type": "number"
                  },
                  "gameVersionIdTo": {
                    "type": "number"
                  },
                  "versionIdsToExclude": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ba/approveEdits": {
      "post": {
        "tags": [
          "Bulk Actions"
        ],
        "summary": "Approve multiple edit requests",
        "description": "Approve multiple edit requests. Requires the user to be an approver.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "successIds": {
                      "type": "array",
                      "example": [
                        1,
                        2
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "errorIds": {
                      "type": "array",
                      "example": [
                        3
                      ],
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "successIds": {
                      "type": "array",
                      "example": [
                        1,
                        2
                      ],
                      "items": {
                        "type": "number"
                      }
                    },
                    "errorIds": {
                      "type": "array",
                      "example": [
                        3
                      ],
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "approve": {
                    "type": "boolean",
                    "default": true
                  },
                  "editIds": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "bbm_session"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "responses": {
      "ServerMessage": {
        "description": "A simple message from the server. Indicates anything from a successful operation to an error message. Most, if not all, endpoints will return this in the event of an error.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServerMessage"
            }
          }
        }
      },
      "ServerMessageWithErrorStringArray": {
        "description": "A simple message from the server. Indicates anything from a successful operation to an error message. Most, if not all, endpoints will return this in the event of an error.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": true,
              "properties": {
                "message": {
                  "type": "string",
                  "description": "The message to be displayed."
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "An array of error messages."
                }
              }
            }
          }
        }
      },
      "ApprovalQueueResponse": {
        "description": "A list of items in the approval queue.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "minProperties": 1,
              "maxProperties": 1,
              "properties": {
                "projects": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectAPIPublicResponse"
                  }
                },
                "versions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "project": {
                        "$ref": "#/components/schemas/ProjectAPIPublicResponse"
                      },
                      "version": {
                        "$ref": "#/components/schemas/VersionDBObject"
                      }
                    }
                  }
                },
                "edits": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "project": {
                        "$ref": "#/components/schemas/ProjectAPIPublicResponse"
                      },
                      "original": {
                        "$ref": "#/components/schemas/VersionDBObject"
                      },
                      "edit": {
                        "$ref": "#/components/schemas/EditApprovalQueueDBObject"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UserResponse": {
        "description": "Returns user information.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserAPIPublicResponse"
            }
          }
        }
      },
      "ProjectVersionPairResponse": {
        "description": "Returns a project and version pair (e.g. a mod).",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProjectVersionPair"
            }
          }
        }
      },
      "ProjectVersionsPairResponse": {
        "description": "Returns a project and version pair (e.g. a mod). `versions` is a list of all visible versions for a project.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "project": {
                  "$ref": "#/components/schemas/ProjectAPIPublicResponse"
                },
                "versions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VersionAPIPublicResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "requestBodies": {
      "ApproveObjectBody": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/zApproveObject"
            }
          }
        }
      }
    },
    "parameters": {
      "raw": {
        "name": "raw",
        "in": "query",
        "description": "If set to true, the response will be altered to return a non-processed version of the object. The resulting response will not have the same structure as the public response. This parameter is used for debugging purposes.",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      }
    },
    "schemas": {
      "ProjectVersionPair": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/ProjectAPIPublicResponse"
          },
          "version": {
            "$ref": "#/components/schemas/VersionAPIPublicResponse"
          }
        }
      },
      "ProjectAPIPublicResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The object's internal ID.",
            "example": 1,
            "minimum": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the project.",
            "example": "Example Project"
          },
          "summary": {
            "type": "string",
            "description": "The summary of the project.",
            "example": "This is an example project."
          },
          "description": {
            "type": "string",
            "description": "The description of the project. Supports markdown.",
            "example": "This is an example project. It is used as an example for the API documentation."
          },
          "gameName": {
            "type": "string",
            "description": "The name of the game this project is for. Must be a game that is returned by the /games endpoint.",
            "example": "BeatSaber",
            "default": "BeatSaber"
          },
          "category": {
            "type": "string",
            "enum": [
              "core",
              "essential",
              "library",
              "cosmetic",
              "practice",
              "gameplay",
              "streamtools",
              "ui",
              "lighting",
              "tweaks",
              "multiplayer",
              "text",
              "editor",
              "other"
            ]
          },
          "authors": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserAPIPublicResponse"
                }
              ]
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "private",
              "removed",
              "unverified",
              "pending",
              "verified"
            ]
          },
          "iconFileName": {
            "type": "string",
            "default": "default.png"
          },
          "gitUrl": {
            "type": "string"
          },
          "statusHistory": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "private",
                    "removed",
                    "unverified",
                    "pending",
                    "verified"
                  ]
                },
                "reason": {
                  "type": "string",
                  "description": "The reason for the status change. This is used to track the history of the project's status.",
                  "example": "This project is currently in development."
                },
                "userId": {
                  "type": "integer",
                  "description": "The ID of the user who changed the status.",
                  "example": 1
                },
                "setAt": {
                  "type": "string",
                  "description": "The date the status was changed.",
                  "example": "2023-10-01T00:00:00.000Z"
                }
              }
            }
          },
          "lastApprovedById": {
            "type": [
              "integer",
              "null"
            ],
            "default": null
          },
          "lastUpdatedById": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "description": "The date the object was added to the database.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date the object was last updated.",
            "example": "2023-10-01T00:00:00.000Z"
          }
        }
      },
      "VersionAPIPublicResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The object's internal ID.",
            "example": 1,
            "minimum": 1
          },
          "projectId": {
            "type": "integer",
            "description": "The parent project's internal ID.",
            "example": 1
          },
          "modVersion": {
            "type": "string",
            "description": "The version string. This is used to identify the version of the mod. This must be SemVer compliant.",
            "example": "1.0.0"
          },
          "author": {
            "$ref": "#/components/schemas/UserAPIPublicResponse"
          },
          "platform": {
            "type": "string",
            "enum": [
              "steampc",
              "oculuspc",
              "universalpc",
              "universalquest"
            ]
          },
          "zipHash": {
            "type": "string",
            "description": "The hash of the zip file. This is used to find and download the zip file. Will be a MD5 hash.",
            "example": "34e6985de8fbf7b525fc841c2cb45786"
          },
          "contentHashes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string"
                },
                "hash": {
                  "type": "string"
                }
              }
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "private",
              "removed",
              "unverified",
              "pending",
              "verified"
            ]
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "supportedGameVersions": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GameVersionAPIPublicResponse"
                }
              ]
            }
          },
          "downloadCount": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "description": "The date the object was added to the database.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date the object was last updated.",
            "example": "2023-10-01T00:00:00.000Z"
          }
        }
      },
      "UserAPIPublicResponse": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The user's username from GitHub.",
            "example": "saeraphinx"
          },
          "githubId": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The user's GitHub ID.",
            "example": 123456789
          },
          "sponsorUrl": {
            "type": [
              "string",
              "null"
            ],
            "description": "The URL to support the user's works financially.",
            "example": "https://www.patreon.com/c/beatsabermods",
            "default": null
          },
          "displayName": {
            "type": "string",
            "description": "The user's display name from GitHub. Is editable after registration, and can be different from the GitHub username/display name.",
            "example": "Saeraphinx"
          },
          "roles": {
            "type": "object",
            "properties": {
              "siteide": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "allpermissions",
                    "admin",
                    "poster",
                    "gamemanager",
                    "approver",
                    "largefiles",
                    "banned"
                  ]
                },
                "default": [],
                "example": [
                  "admin"
                ],
                "description": "Site-wide roles. Takes precedence over per-game roles."
              },
              "perGame": {
                "type": "object",
                "example": {
                  "BeatSaber": [
                    "approver"
                  ]
                }
              }
            },
            "default": {
              "siteide": [],
              "perGame": {}
            },
            "example": {
              "siteide": [
                "admin"
              ],
              "perGame": {
                "BeatSaber": [
                  "approver"
                ]
              }
            }
          },
          "bio": {
            "type": "string",
            "description": "The user's bio from GitHub. Is editable after registration. Supports markdown.",
            "example": "j"
          },
          "id": {
            "type": "integer",
            "description": "The object's internal ID.",
            "example": 1,
            "minimum": 1
          },
          "createdAt": {
            "type": "string",
            "description": "The date the object was added to the database.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date the object was last updated.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "deletedAt": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date the object was deleted from the database.",
            "example": "2023-10-01T00:00:00.000Z"
          }
        }
      },
      "GameVersionAPIPublicResponse": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string",
            "description": "The name of the game this version is for. This is used to identify the game.",
            "example": "BeatSaber"
          },
          "version": {
            "type": "string",
            "description": "The version string. This is used to identify the version of the game.",
            "example": "1.0.0"
          },
          "id": {
            "type": "integer",
            "description": "The object's internal ID.",
            "example": 1,
            "minimum": 1
          },
          "createdAt": {
            "type": "string",
            "description": "The date the object was added to the database.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date the object was last updated.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "deletedAt": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date the object was deleted from the database.",
            "example": "2023-10-01T00:00:00.000Z"
          }
        }
      },
      "APIStatus": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Status message.",
            "example": "API is running.",
            "default": "API is running."
          },
          "veryImportantMessage": {
            "type": "string",
            "description": "Very important message.",
            "example": "pink cute, era cute, lillie cute, william gay",
            "default": "pink cute, era cute, lillie cute, william gay"
          },
          "apiVersion": {
            "type": "string",
            "description": "API version (as seen in documentation).",
            "example": "0.0.1",
            "default": "Version not found."
          },
          "gitVersion": {
            "type": "string",
            "description": "Git commit hash.",
            "example": "3d94a00",
            "default": "Version not found."
          },
          "isDocker": {
            "type": "boolean",
            "description": "Whether the API is running in Docker or not.",
            "example": true,
            "default": false
          }
        }
      },
      "zCreateProject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the project.",
            "example": "Example Project"
          },
          "summary": {
            "type": "string",
            "description": "The summary of the project.",
            "example": "This is an example project."
          },
          "description": {
            "type": "string",
            "description": "The description of the project. Supports markdown.",
            "example": "This is an example project. It is used as an example for the API documentation."
          },
          "category": {
            "type": "string",
            "enum": [
              "core",
              "essential",
              "library",
              "cosmetic",
              "practice",
              "gameplay",
              "streamtools",
              "ui",
              "lighting",
              "tweaks",
              "multiplayer",
              "text",
              "editor",
              "other"
            ]
          },
          "gitUrl": {
            "type": "string"
          },
          "gameName": {
            "type": "string",
            "description": "The name of the game this project is for. Must be a game that is returned by the /games endpoint.",
            "example": "BeatSaber",
            "default": "BeatSaber"
          }
        }
      },
      "zCreateVersion": {
        "type": "object",
        "properties": {
          "supportedGameVersionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "The ID of the game version this version supports."
            }
          },
          "modVersion": {
            "type": "string",
            "description": "The version string. This is used to identify the version of the mod. This must be SemVer compliant.",
            "example": "1.0.0"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "parentId": {
                  "type": "integer",
                  "description": "The ID of the project this version depends on."
                },
                "sv": {
                  "type": "string",
                  "description": "The comapre version string. This is used to identify the version of the mod. This must be SemVer compliant.",
                  "example": "^1.0.0"
                }
              }
            }
          },
          "platform": {
            "type": "string",
            "enum": [
              "steampc",
              "oculuspc",
              "universalpc",
              "universalquest"
            ]
          }
        }
      },
      "zUpdateProject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the project.",
            "example": "Example Project"
          },
          "summary": {
            "type": "string",
            "description": "The summary of the project.",
            "example": "This is an example project."
          },
          "description": {
            "type": "string",
            "description": "The description of the project. Supports markdown.",
            "example": "This is an example project. It is used as an example for the API documentation."
          },
          "category": {
            "type": "string",
            "enum": [
              "core",
              "essential",
              "library",
              "cosmetic",
              "practice",
              "gameplay",
              "streamtools",
              "ui",
              "lighting",
              "tweaks",
              "multiplayer",
              "text",
              "editor",
              "other"
            ]
          },
          "gitUrl": {
            "type": "string"
          },
          "gameName": {
            "type": "string",
            "description": "The name of the game this project is for. Must be a game that is returned by the /games endpoint.",
            "example": "BeatSaber",
            "default": "BeatSaber"
          },
          "authorIds": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "The IDs of the authors of this project. This id can be resolved to a user object using the /users/{id} endpoint."
          }
        }
      },
      "zUpdateVersion": {
        "type": "object",
        "properties": {
          "supportedGameVersionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "The ID of the game version this version supports."
            }
          },
          "modVersion": {
            "type": "string",
            "description": "The version string. This is used to identify the version of the mod. This must be SemVer compliant.",
            "example": "1.0.0"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "parentId": {
                  "type": "integer",
                  "description": "The ID of the project this version depends on."
                },
                "sv": {
                  "type": "string",
                  "description": "The comapre version string. This is used to identify the version of the mod. This must be SemVer compliant.",
                  "example": "^1.0.0"
                }
              }
            }
          },
          "platform": {
            "type": "string",
            "enum": [
              "steampc",
              "oculuspc",
              "universalpc",
              "universalquest"
            ]
          }
        }
      },
      "zOAuth2Callback": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code returned from GitHub.",
            "example": "1234567890abcdef"
          },
          "state": {
            "type": "string",
            "description": "The state returned from GitHub.",
            "example": "1234567890abcdef"
          }
        }
      },
      "zUpdateUserRoles": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "The object's internal ID.",
            "example": 1,
            "minimum": 1
          },
          "gameName": {
            "type": "string",
            "description": "The name of the game this version is for. This is used to identify the game.",
            "example": "BeatSaber"
          },
          "role": {
            "type": "string",
            "enum": [
              "allpermissions",
              "admin",
              "poster",
              "gamemanager",
              "approver",
              "largefiles",
              "banned"
            ]
          }
        }
      },
      "zApproveObject": {
        "type": "object",
        "required": [
          "action"
        ],
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "accept",
              "deny",
              "remove",
              "restore"
            ],
            "description": "The action to take."
          },
          "reason": {
            "type": "string",
            "description": "The reason for the action."
          }
        }
      },
      "VersionDBObject": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "description": "The parent project's internal ID.",
            "example": 1
          },
          "modVersion": {
            "type": "string",
            "description": "The version string. This is used to identify the version of the mod. This must be SemVer compliant.",
            "example": "1.0.0"
          },
          "authorId": {
            "type": "integer",
            "description": "The ID of the user who uploaded/authored this version."
          },
          "platform": {
            "type": "string",
            "enum": [
              "steampc",
              "oculuspc",
              "universalpc",
              "universalquest"
            ]
          },
          "zipHash": {
            "type": "string",
            "description": "The hash of the zip file. This is used to find and download the zip file. Will be a MD5 hash.",
            "example": "34e6985de8fbf7b525fc841c2cb45786"
          },
          "contentHashes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string"
                },
                "hash": {
                  "type": "string"
                }
              }
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "private",
              "removed",
              "unverified",
              "pending",
              "verified"
            ]
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "parentId": {
                  "type": "integer",
                  "description": "The ID of the project this version depends on."
                },
                "sv": {
                  "type": "string",
                  "description": "The comapre version string. This is used to identify the version of the mod. This must be SemVer compliant.",
                  "example": "^1.0.0"
                }
              }
            }
          },
          "supportedGameVersionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "The ID of the game version this version supports."
            }
          },
          "downloadCount": {
            "type": "integer"
          },
          "fileSize": {
            "type": "integer",
            "description": "The size of the file in bytes.",
            "example": 12345678,
            "default": 0
          },
          "id": {
            "type": "integer",
            "description": "The object's internal ID.",
            "example": 1,
            "minimum": 1
          },
          "createdAt": {
            "type": "string",
            "description": "The date the object was added to the database.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date the object was last updated.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "deletedAt": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date the object was deleted from the database.",
            "example": "2023-10-01T00:00:00.000Z"
          }
        }
      },
      "EditApprovalQueueDBObject": {
        "type": "object",
        "properties": {
          "submitterId": {
            "type": "integer",
            "description": "The ID of the user who submitted this edit."
          },
          "objectId": {
            "type": "integer",
            "description": "The ID of the object being edited."
          },
          "objectTableName": {
            "type": "string",
            "description": "The name of the table that objectId belongs to."
          },
          "object": {
            "type": "object",
            "properties": {
              "modVersion": {
                "type": "string",
                "description": "The version string. This is used to identify the version of the mod. This must be SemVer compliant.",
                "example": "1.0.0"
              },
              "platform": {
                "type": "string",
                "enum": [
                  "steampc",
                  "oculuspc",
                  "universalpc",
                  "universalquest"
                ]
              },
              "dependencies": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "parentId": {
                      "type": "integer",
                      "description": "The ID of the project this version depends on."
                    },
                    "sv": {
                      "type": "string",
                      "description": "The comapre version string. This is used to identify the version of the mod. This must be SemVer compliant.",
                      "example": "^1.0.0"
                    }
                  }
                }
              },
              "supportedGameVersionIds": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "description": "The ID of the game version this version supports."
                }
              },
              "name": {
                "type": "string",
                "description": "The name of the project.",
                "example": "Example Project"
              },
              "summary": {
                "type": "string",
                "description": "The summary of the project.",
                "example": "This is an example project."
              },
              "description": {
                "type": "string",
                "description": "The description of the project. Supports markdown.",
                "example": "This is an example project. It is used as an example for the API documentation."
              },
              "gameName": {
                "type": "string",
                "description": "The name of the game this project is for. Must be a game that is returned by the /games endpoint.",
                "example": "BeatSaber",
                "default": "BeatSaber"
              },
              "category": {
                "type": "string",
                "enum": [
                  "core",
                  "essential",
                  "library",
                  "cosmetic",
                  "practice",
                  "gameplay",
                  "streamtools",
                  "ui",
                  "lighting",
                  "tweaks",
                  "multiplayer",
                  "text",
                  "editor",
                  "other"
                ]
              },
              "authorIds": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "The IDs of the authors of this project. This id can be resolved to a user object using the /users/{id} endpoint."
              },
              "gitUrl": {
                "type": "string"
              }
            }
          },
          "approverId": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The ID of the user who approved this edit.",
            "default": null,
            "example": 1
          },
          "approved": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether the edit has been approved or not.",
            "example": false,
            "default": null
          },
          "id": {
            "type": "integer",
            "description": "The object's internal ID.",
            "example": 1,
            "minimum": 1
          },
          "createdAt": {
            "type": "string",
            "description": "The date the object was added to the database.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date the object was last updated.",
            "example": "2023-10-01T00:00:00.000Z"
          },
          "deletedAt": {
            "type": [
              "string",
              "null"
            ],
            "description": "The date the object was deleted from the database.",
            "example": "2023-10-01T00:00:00.000Z"
          }
        }
      },
      "ProjectEditResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The message to be displayed."
          },
          "project": {
            "$ref": "#/components/schemas/ProjectAPIPublicResponse"
          }
        }
      },
      "VersionEditResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The message to be displayed."
          },
          "version": {
            "$ref": "#/components/schemas/VersionDBObject"
          }
        }
      },
      "EditApprovalQueueResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The message to be displayed."
          },
          "edit": {
            "$ref": "#/components/schemas/EditApprovalQueueDBObject"
          }
        }
      },
      "ServerMessage": {
        "type": "object",
        "description": "A simple message from the server. Indicates anything from a successful operation to an error message. Most, if not all, endpoints will return this in the event of an error.",
        "properties": {
          "message": {
            "type": "string",
            "description": "The message to be displayed."
          }
        },
        "additionalProperties": true,
        "example": {
          "message": "string"
        }
      }
    }
  }
}